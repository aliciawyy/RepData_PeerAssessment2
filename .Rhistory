x <- 1
print(x)
msg <- "hello"
print(msg)
msg
x
x <- 5
x
y
x <- 1:20
x
x <- 1:30
x
q
X
quit
q()
install.packages("swirl")
library(swirl)
install.packages("httr")
install.packages("codetools")
install.packages("httr")
install.packages("swirl")
library(swirk)
library(swirl)
swirl()
1
swirl()
5+7
x <- 5+ 7
x
y <- x -3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1:4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, 1,  2), times = 10)
rep(c(0, 1,  2), each = 10)
x <- 4
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- c(3, 5, 1, 10, 12, 6)
x[x < 6] <- 0
x
x <- 4L
class(x)
x <- c(4, TRUE)
class(x)
y <- 2:3
x <- 1:4
x+y
class(x+y)
class(x)
install.packages("KernSmooth")
search(KernSmooth)
search()
import(KernSmooth)
library(KernSmooth)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "sheep")
my name
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, "X", "Y", "Z", sep="")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
swirl()
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
is.na(myData)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf - Inf
x
x[1:10]
x[is.na[x]]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector <- 1:20
myVect
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix()
?matrix
?matrix()
?matrix
myMatrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData) <- cnames
myData
install_from_swirl("Open Intro")
install_from_swirl("Data Analysis")
swirl()
y <- 100
cars$type
sqrt(y)
z <- sqrt(y)
?sqrt
cars
10
range(cars$price)
nxt()
sum(cars$price)
sum(cars$price)/54
mean(cars$price)
mpg.midsize
sort(mpg.midsize)
mpg.sorted <- sort(mpg.midsize)
19
median(mpg.midsize)
summary(cars$mpgCity)
nxt()
25
1
9
3
19
nxt()
25
27
17
sd(mpg.midsize)
sd(mpg.midsize)^2
24
swirl()
?seq_len
q()
?lapply
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
?runif
?split
?noise
library(datasets)
data(iris)
?iris
mean(iris$Sepal.Length)
?iris
names(iris)
rnames(iris)
rownames(iris)
iris.Species
iris$Species
iris$Species == "virginica"
mean(iris$Sepal.Length[iris$Species == "virginica"])
mean(iris$Sepal.Length)
mean(iris$Sepal.Length[iris$Species == "virginica"])
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
?apply
data(mtcars)
?mtcars
names(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$hp[mtcars$cyl == 4])
mean(mtcars$hp)
mean(mtcars$hp[mtcars$cyl == 8])
hp8 <- mean(mtcars$hp[mtcars$cyl == 8])
hp4 <- mean(mtcars$hp[mtcars$cyl == 4])
hp8 - hp4
debug(ls)
ls
debug(mean)
mean(mtcars$hp)
q
quit
step
quit
exit
## The functions in this file are supposed to
## cache potentially time-consuming computations.
library(datasets)
data(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
qnorm(0.995)
q(0.95)
z <- qnorm(0.95)
z
pnorm(0.42)
SE <- 4.15/sqrt(52)
SE
qnorm(.99)
qtile <- qnorm(.99)
qtile*SE
46.99 - qtile*SE
x <- (46.99 - 44.17)/SE
x
qnorm(x)
pnorm(x)
1- pnorm(x)
(1- pnorm(x))*100
SE <- 1.8/sqrt(72)
SE
pnorm(6.83-7/SE)
pnorm((6.83-7)/SE)
pnorm((6.83-7)/SE)*2
library(datasets)
usedata(mtcars)
?mtcars
summary(mtcars)
str(mtcars)
names(mtcars)
---
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
?lm
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child, 4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd = 3, col = "red")
summary(regrline)
setwd("./Codes/R/Coursera/RepData_PeerAssessment2/")
storm <- read.csv("repdata-data-StormData.csv", sep = ",")
small <- storm[sample(nrow(storm), 1000), ]
qplot(EVTYPE, data = storm, data = small, weight =  FATALITIES) + scale_y_continuous("FATALITIES")
library(ggplot2)
qplot(EVTYPE, data = storm, data = small, weight =  FATALITIES) + scale_y_continuous("FATALITIES")
qplot(EVTYPE, data = small, weight =  FATALITIES) + scale_y_continuous("FATALITIES")
qplot(EVTYPE, data = small, weight =  FATALITIES, geom = "bar") + scale_y_continuous("FATALITIES")
qplot(EVTYPE, data = small, weight =  FATALITIES, geom = "bar") + scale_y_continuous("FATALITIES") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
qplot(EVTYPE, data = small, weight =  c(FATALITIES, INJURIES, geom = "bar") + scale_y_continuous("FATALITIES") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
q
qplot(EVTYPE, data = small, weight =  c(FATALITIES, INJURIES), geom = "bar") + scale_y_continuous("FATALITIES") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
quit()
